---
import { getCollection } from 'astro:content';

// Get all blog posts for search
const allPosts = await getCollection('blog', ({ data }) => {
  return import.meta.env.DEV || !data.draft;
});

// Convert posts to a format suitable for search
const searchableContent = allPosts.map(post => ({
  id: post.id,
  slug: post.slug,
  title: post.data.title,
  description: post.data.description || '',
  date: post.data.date.toISOString(),
  content: post.body.slice(0, 1000), // First 1000 chars for search
  url: `/blog/${post.slug}`
}));
---

<div 
  id="search-modal" 
  x-data="{ 
    open: false,
    query: '',
    results: [],
    selectedIndex: -1,
    init() {
      this.$watch('open', value => {
        if (value) {
          setTimeout(() => this.$refs.searchInput.focus(), 50);
          document.body.classList.add('modal-open');
        } else {
          document.body.classList.remove('modal-open');
        }
      });
      
      document.addEventListener('toggle-search', () => {
        this.open = !this.open;
        this.query = '';
        this.results = [];
      });
      
      document.addEventListener('keydown', (e) => {
        if (e.key === '/' && !this.open && e.target.tagName !== 'INPUT' && e.target.tagName !== 'TEXTAREA') {
          e.preventDefault();
          this.open = true;
        }
        if (e.key === 'Escape' && this.open) {
          this.open = false;
        }
      });
    },
    search() {
      if (this.query.length < 2) {
        this.results = [];
        return;
      }
      
      const fuseSearch = new window.Fuse(this.searchableContent, {
        keys: ['title', 'description', 'content'],
        includeScore: true,
        threshold: 0.4,
        ignoreLocation: true
      });
      
      this.results = fuseSearch.search(this.query).slice(0, 10);
      this.selectedIndex = this.results.length > 0 ? 0 : -1;
    },
    handleKeyDown(event) {
      if (event.key === 'ArrowDown') {
        event.preventDefault();
        this.selectedIndex = Math.min(this.selectedIndex + 1, this.results.length - 1);
      } else if (event.key === 'ArrowUp') {
        event.preventDefault();
        this.selectedIndex = Math.max(this.selectedIndex - 1, 0);
      } else if (event.key === 'Enter' && this.selectedIndex >= 0) {
        event.preventDefault();
        window.location.href = this.results[this.selectedIndex].item.url;
      }
    }
  }"
  x-init="searchableContent = JSON.parse(decodeURIComponent('<%- encodeURIComponent(JSON.stringify(searchableContent)) %>'))"
  x-show="open"
  x-transition:enter="transition ease-out duration-200"
  x-transition:enter-start="opacity-0 transform scale-95"
  x-transition:enter-end="opacity-100 transform scale-100"
  x-transition:leave="transition ease-in duration-150"
  x-transition:leave-start="opacity-100 transform scale-100"
  x-transition:leave-end="opacity-0 transform scale-95"
  class="search-modal"
  @keydown.escape="open = false"
>
  <div class="search-backdrop" @click="open = false"></div>
  
  <div class="search-container">
    <div class="search-header">
      <div class="terminal-dots">
        <div class="dot red"></div>
        <div class="dot yellow"></div>
        <div class="dot green"></div>
      </div>
      <span class="search-title">$ grep -r</span>
      <button class="close-button" @click="open = false">×</button>
    </div>
    
    <div class="search-content">
      <div class="search-input-container">
        <input 
          x-ref="searchInput"
          type="text" 
          placeholder="Search the blog..." 
          x-model="query" 
          @input="search()"
          @keydown="handleKeyDown($event)"
          class="search-input"
        />
      </div>
      
      <div class="search-results" x-show="query.length > 1">
        <template x-if="results.length === 0 && query.length > 1">
          <div class="no-results">No results found for "<span x-text="query"></span>"</div>
        </template>
        
        <template x-if="results.length > 0">
          <ul class="results-list">
            <template x-for="(result, index) in results" :key="result.item.id">
              <li 
                class="result-item" 
                :class="{ 'selected': index === selectedIndex }"
                @click="window.location.href = result.item.url"
                @mouseover="selectedIndex = index"
              >
                <div class="result-title" x-text="result.item.title"></div>
                <div class="result-date" x-text="new Date(result.item.date).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })"></div>
                <div class="result-description" x-text="result.item.description || result.item.content.slice(0, 100) + '...'"></div>
              </li>
            </template>
          </ul>
        </template>
      </div>
    </div>
    
    <div class="search-footer" x-show="query.length > 1">
      <div class="keyboard-shortcuts">
        <span>↑↓ to navigate</span>
        <span>↵ to select</span>
        <span>ESC to close</span>
      </div>
    </div>
  </div>
</div>

<style>
  .search-modal {
    position: fixed;
    inset: 0;
    z-index: 200;
    display: flex;
    justify-content: center;
    align-items: flex-start;
    padding-top: 5vh;
    overflow-y: auto;
  }
  
  .search-backdrop {
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(2px);
  }
  
  .search-container {
    position: relative;
    width: 90%;
    max-width: 700px;
    max-height: 80vh;
    display: flex;
    flex-direction: column;
    background-color: var(--content-bg);
    border-radius: 5px;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.2);
    overflow: hidden;
    animation: slideDown 0.2s ease-out;
  }
  
  .search-header {
    display: flex;
    align-items: center;
    padding: 10px 15px;
    background-color: var(--header-bg);
    border-bottom: 1px solid var(--border-color);
  }
  
  .search-title {
    margin-left: 10px;
    font-weight: 500;
    color: var(--terminal-green);
  }
  
  .close-button {
    margin-left: auto;
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--text-color);
    padding: 0 5px;
  }
  
  .search-content {
    padding: 15px;
    overflow-y: auto;
    flex: 1;
  }
  
  .search-input-container {
    position: relative;
    margin-bottom: 15px;
  }
  
  .search-input {
    width: 100%;
    padding: 10px;
    font-family: inherit;
    font-size: 1rem;
    background-color: var(--highlight-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    color: var(--text-color);
  }
  
  .search-input:focus {
    outline: none;
    border-color: var(--terminal-blue);
  }
  
  .search-results {
    max-height: 50vh;
    overflow-y: auto;
  }
  
  .no-results {
    padding: 20px;
    text-align: center;
    color: var(--date-color);
  }
  
  .results-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .result-item {
    padding: 12px;
    border-bottom: 1px solid var(--border-color);
    cursor: pointer;
    transition: background-color 0.15s;
  }
  
  .result-item:last-child {
    border-bottom: none;
  }
  
  .result-item:hover, .result-item.selected {
    background-color: var(--highlight-bg);
  }
  
  .result-title {
    font-weight: 500;
    margin-bottom: 5px;
  }
  
  .result-date {
    font-size: 0.8rem;
    color: var(--date-color);
    margin-bottom: 5px;
  }
  
  .result-description {
    font-size: 0.9rem;
    color: var(--command-color);
  }
  
  .search-footer {
    padding: 10px 15px;
    border-top: 1px solid var(--border-color);
    background-color: var(--header-bg);
  }
  
  .keyboard-shortcuts {
    display: flex;
    justify-content: center;
    gap: 15px;
    color: var(--date-color);
    font-size: 0.8rem;
  }
  
  .keyboard-shortcuts span {
    background-color: var(--highlight-bg);
    padding: 2px 6px;
    border-radius: 3px;
  }
  
  @keyframes slideDown {
    from {
      transform: translateY(-20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  :global(body.modal-open) {
    overflow: hidden;
  }
  
  @media (max-width: 480px) {
    .keyboard-shortcuts {
      flex-direction: column;
      align-items: center;
      gap: 5px;
    }
  }
</style>